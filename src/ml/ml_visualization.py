"""
Machine Learning Visualization Module.

This module provides utility functions for creating visualizations related to
machine learning model predictions in the context of financial markets.
Specifically, it offers tools to overlay trading signals (e.g., buy/sell indicators
generated by an ML model) onto price charts, facilitating visual analysis of
model performance and behavior. Plotly is used for generating interactive charts.
"""
# src/ml/ml_visualization.py
# Contains functions for visualizing ML model predictions on price data.

import pandas as pd
import numpy as np
import plotly.graph_objects as go

def plot_price_with_signals(price_df: pd.DataFrame,
                            signals_series: pd.Series,
                            buy_signal_val=1,
                            sell_signal_val=0,
                            plot_title: str = 'Price with Buy/Sell Signals') -> go.Figure:
    """
    Generates an interactive Plotly candlestick chart displaying OHLC price data,
    with specified buy and sell trading signals overlaid as distinct markers.

    Args:
        price_df (pd.DataFrame): DataFrame containing the historical price data.
                                 It must include 'Open', 'High', 'Low', 'Close' columns.
                                 The index should ideally be a DatetimeIndex; if not,
                                 a 'Date' column that can be converted to DatetimeIndex
                                 is expected.
        signals_series (pd.Series): A pandas Series containing the trading signals.
                                    Its index should align with the dates in `price_df`.
                                    Values in this series are used to identify buy or
                                    sell signals at specific time points.
        buy_signal_val (any, optional): The value within `signals_series` that
                                        represents a "buy" signal. Defaults to 1.
        sell_signal_val (any, optional): The value within `signals_series` that
                                         represents a "sell" signal. Defaults to 0.
        plot_title (str, optional): The title for the generated plot.
                                    Defaults to 'Price with Buy/Sell Signals'.

    Returns:
        plotly.graph_objects.Figure: A Plotly Figure object containing the
                                     candlestick chart with the buy/sell signals
                                     overlaid. This figure can be displayed in a
                                     Jupyter notebook, saved as HTML, or integrated
                                     into web applications.

    Raises:
        ValueError: If `price_df` does not have a DatetimeIndex or a convertible
                    'Date' column, or if essential OHLC columns are missing.

    Important Logic:
        - Data Alignment: The function first ensures `price_df` has a DatetimeIndex.
          It then reindexes `signals_series` to align with `price_df`'s index,
          ensuring signals correctly map to price data points.
        - Candlestick Chart: A primary candlestick trace is created for the OHLC data.
        - Signal Plotting:
            - Buy signals (identified by `buy_signal_val`) are plotted as green,
              upward-pointing triangle markers, positioned slightly below the 'Low'
              price of the corresponding candle.
            - Sell signals (identified by `sell_signal_val`) are plotted as red,
              downward-pointing triangle markers, positioned slightly above the 'High'
              price of the corresponding candle.
        - Interactivity: Hover text is included for signals, showing the signal type
          (Buy/Sell) and the 'Close' price at that point.
        - Layout: The plot includes a title, axis labels, a legend, and uses a
          clean Plotly template. The rangeslider on the x-axis is hidden by default.
    """
    plot_df = price_df.copy()

    # Ensure index is DatetimeIndex for time-series plotting
    if not isinstance(plot_df.index, pd.DatetimeIndex):
        if 'Date' in plot_df.columns: # Check if 'Date' column exists
            plot_df['Date'] = pd.to_datetime(plot_df['Date'])
            plot_df.set_index('Date', inplace=True)
        else: # Try converting existing index
            try:
                plot_df.index = pd.to_datetime(plot_df.index)
            except Exception as e:
                raise ValueError(
                    "price_df index must be convertible to DatetimeIndex or "
                    "DataFrame must contain a 'Date' column."
                ) from e

    # Verify necessary OHLC columns are present
    required_ohlc = ['Open', 'High', 'Low', 'Close']
    if not all(col in plot_df.columns for col in required_ohlc):
        missing = [col for col in required_ohlc if col not in plot_df.columns]
        raise ValueError(f"price_df is missing required OHLC columns: {missing}")


    fig = go.Figure()

    # Add Candlestick trace for price data
    fig.add_trace(go.Candlestick(
        x=plot_df.index,
        open=plot_df['Open'],
        high=plot_df['High'],
        low=plot_df['Low'],
        close=plot_df['Close'],
        name='Price'
    ))

    # Align signals_series index with price_df index to ensure correct mapping
    aligned_signals = signals_series.reindex(plot_df.index)

    # Filter for buy and sell signals based on their defined values
    buy_signal_indices = aligned_signals[aligned_signals == buy_signal_val].index
    sell_signal_indices = aligned_signals[aligned_signals == sell_signal_val].index

    # Add Buy signals markers
    if not buy_signal_indices.empty:
        # Ensure signals are within the plotted price data range
        valid_buy_indices = plot_df.index.intersection(buy_signal_indices)
        if not valid_buy_indices.empty:
            buy_marker_prices = plot_df.loc[valid_buy_indices]['Low'] * 0.98  # Position below the Low
            fig.add_trace(go.Scatter(
                x=valid_buy_indices,
                y=buy_marker_prices,
                mode='markers',
                name='Buy Signal',
                marker=dict(symbol='triangle-up', color='green', size=10, line=dict(width=1, color='DarkSlateGrey')),
                hoverinfo='x+text',
                text=[f'Buy Signal at {price:.2f}' for price in plot_df.loc[valid_buy_indices]['Close']]
            ))

    # Add Sell signals markers
    if not sell_signal_indices.empty:
        valid_sell_indices = plot_df.index.intersection(sell_signal_indices)
        if not valid_sell_indices.empty:
            sell_marker_prices = plot_df.loc[valid_sell_indices]['High'] * 1.02  # Position above the High
            fig.add_trace(go.Scatter(
                x=valid_sell_indices,
                y=sell_marker_prices,
                mode='markers',
                name='Sell Signal',
                marker=dict(symbol='triangle-down', color='red', size=10, line=dict(width=1, color='DarkSlateGrey')),
                hoverinfo='x+text',
                text=[f'Sell Signal at {price:.2f}' for price in plot_df.loc[valid_sell_indices]['Close']]
            ))

    # Update layout aesthetics
    fig.update_layout(
        title=plot_title,
        xaxis_title='Date',
        yaxis_title='Price',
        xaxis_rangeslider_visible=False, # Hide the default rangeslider
        legend_title_text='Legend',
        template='plotly_white' # Using a clean, professional template
    )

    return fig

if __name__ == '__main__':
    print("--- Testing ML Visualization: plot_price_with_signals ---")
    # Create dummy price data for example
    num_days = 100
    start_date = pd.to_datetime('2023-01-01')
    date_rng = pd.date_range(start=start_date, periods=num_days, freq='B') # Business days

    # Generate somewhat realistic OHLC data
    open_prices = np.random.uniform(100, 150, num_days)
    close_prices = open_prices + np.random.uniform(-5, 5, num_days)
    high_prices = np.maximum(open_prices, close_prices) + np.random.uniform(0, 5, num_days)
    low_prices = np.minimum(open_prices, close_prices) - np.random.uniform(0, 5, num_days)

    price_data_example = pd.DataFrame({
        'Open': open_prices,
        'High': high_prices,
        'Low': low_prices,
        'Close': close_prices
    }, index=date_rng)
    price_data_example.index.name = 'Date'


    # Create dummy signals series, ensuring signals align with price data dates
    signal_dates_example = np.random.choice(price_data_example.index, size=int(num_days * 0.2), replace=False) # 20% of days have signals
    signal_values_example = np.random.choice([0, 1, 2], size=len(signal_dates_example)) # 0 for sell, 1 for buy, 2 for hold (ignored)

    signals_example = pd.Series(signal_values_example, index=signal_dates_example, name='ML_Signal')
    signals_example.sort_index(inplace=True) # Good practice

    print("\nExample Price Data (first 5 rows):")
    print(price_data_example.head())
    print("\nExample Signals Series (first 5 signals or less):")
    print(signals_example.head())
    print(f"Total signals: {len(signals_example)}, Buy (1): {(signals_example==1).sum()}, Sell (0): {(signals_example==0).sum()}")

    # Plot using the function
    fig_example = plot_price_with_signals(
        price_df=price_data_example,
        signals_series=signals_example,
        buy_signal_val=1, # Explicitly define signal values
        sell_signal_val=0,
        plot_title="Example: Price Data with Buy/Sell ML Signals"
    )

    # Save to HTML for easy viewing
    output_html_file = "ml_visualization_example_plot.html"
    try:
        fig_example.write_html(output_html_file)
        print(f"\nExample plot saved to: {output_html_file}")
        print("To view the plot, open this HTML file in a web browser.")
    except Exception as e:
        print(f"Error saving plot to HTML: {e}")

    # If running in an environment that supports direct Plotly figure display (e.g., Jupyter),
    # uncomment the following line:
    # fig_example.show()
    print("\n--- ML Visualization Test Complete ---")

[end of src/ml/ml_visualization.py]
